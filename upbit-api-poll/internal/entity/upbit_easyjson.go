// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD1ca1c96DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity(in *jlexer.Lexer, out *SingleAnnouncement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			out.Success = bool(in.Bool())
		case "error_code":
			out.ErrorCode = int(in.Int())
		case "error_message":
			out.ErrorMessage = string(in.String())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1ca1c96EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity(out *jwriter.Writer, in SingleAnnouncement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Success))
	}
	{
		const prefix string = ",\"error_code\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"error_message\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SingleAnnouncement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD1ca1c96EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SingleAnnouncement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD1ca1c96EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SingleAnnouncement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD1ca1c96DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SingleAnnouncement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD1ca1c96DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity(l, v)
}
func easyjsonD1ca1c96DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity1(in *jlexer.Lexer, out *Notice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "category":
			out.Category = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "listed_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ListedAt).UnmarshalJSON(data))
			}
		case "first_listed_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FirstListedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1ca1c96EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity1(out *jwriter.Writer, in Notice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"listed_at\":"
		out.RawString(prefix)
		out.Raw((in.ListedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"first_listed_at\":"
		out.RawString(prefix)
		out.Raw((in.FirstListedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Notice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD1ca1c96EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD1ca1c96EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD1ca1c96DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD1ca1c96DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity1(l, v)
}
func easyjsonD1ca1c96DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity2(in *jlexer.Lexer, out *Announcements) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			out.Success = bool(in.Bool())
		case "error_code":
			out.ErrorCode = int(in.Int())
		case "error_message":
			out.ErrorMessage = string(in.String())
		case "data":
			easyjsonD1ca1c96Decode(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1ca1c96EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity2(out *jwriter.Writer, in Announcements) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Success))
	}
	{
		const prefix string = ",\"error_code\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"error_message\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjsonD1ca1c96Encode(out, in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Announcements) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD1ca1c96EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Announcements) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD1ca1c96EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Announcements) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD1ca1c96DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Announcements) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD1ca1c96DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity2(l, v)
}
func easyjsonD1ca1c96Decode(in *jlexer.Lexer, out *struct {
	TotalPages int      `json:"total_pages"`
	TotalCount int      `json:"total_count"`
	Notices    []Notice `json:"notices"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total_pages":
			out.TotalPages = int(in.Int())
		case "total_count":
			out.TotalCount = int(in.Int())
		case "notices":
			if in.IsNull() {
				in.Skip()
				out.Notices = nil
			} else {
				in.Delim('[')
				if out.Notices == nil {
					if !in.IsDelim(']') {
						out.Notices = make([]Notice, 0, 0)
					} else {
						out.Notices = []Notice{}
					}
				} else {
					out.Notices = (out.Notices)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Notice
					(v1).UnmarshalEasyJSON(in)
					out.Notices = append(out.Notices, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1ca1c96Encode(out *jwriter.Writer, in struct {
	TotalPages int      `json:"total_pages"`
	TotalCount int      `json:"total_count"`
	Notices    []Notice `json:"notices"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total_pages\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalPages))
	}
	{
		const prefix string = ",\"total_count\":"
		out.RawString(prefix)
		out.Int(int(in.TotalCount))
	}
	{
		const prefix string = ",\"notices\":"
		out.RawString(prefix)
		if in.Notices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Notices {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
