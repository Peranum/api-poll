// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1760e0e8DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity(in *jlexer.Lexer, out *SuckerPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "time":
			out.Time = int64(in.Int64())
		case "announcement":
			out.Announcement = string(in.String())
		case "original_title":
			out.OriginalTitle = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "exchange":
			out.Exchange = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "detections":
			if in.IsNull() {
				in.Skip()
				out.Detections = nil
			} else {
				in.Delim('[')
				if out.Detections == nil {
					if !in.IsDelim(']') {
						out.Detections = make([]Detection, 0, 4)
					} else {
						out.Detections = []Detection{}
					}
				} else {
					out.Detections = (out.Detections)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Detection
					(v1).UnmarshalEasyJSON(in)
					out.Detections = append(out.Detections, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1760e0e8EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity(out *jwriter.Writer, in SuckerPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"announcement\":"
		out.RawString(prefix)
		out.String(string(in.Announcement))
	}
	{
		const prefix string = ",\"original_title\":"
		out.RawString(prefix)
		out.String(string(in.OriginalTitle))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"exchange\":"
		out.RawString(prefix)
		out.String(string(in.Exchange))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"detections\":"
		out.RawString(prefix)
		if in.Detections == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Detections {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SuckerPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1760e0e8EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SuckerPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1760e0e8EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SuckerPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1760e0e8DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SuckerPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1760e0e8DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity(l, v)
}
func easyjson1760e0e8DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity1(in *jlexer.Lexer, out *Detection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ticker":
			out.Ticker = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1760e0e8EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity1(out *jwriter.Writer, in Detection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ticker\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ticker))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Detection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1760e0e8EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Detection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1760e0e8EncodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Detection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1760e0e8DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Detection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1760e0e8DecodeGithubComShadowWeb3DevelopmentStudioListingsUpbitApiPollInternalEntity1(l, v)
}
